// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Takke.Models;

namespace Takke.Migrations
{
    [DbContext(typeof(TakkeContext))]
    [Migration("20211112233107_InitialCreateSetting")]
    partial class InitialCreateSetting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Arabic_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Takke.Models.ActivationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Creating_date");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("registeration_date");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Activation_code");
                });

            modelBuilder.Entity("Takke.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("Car_Model")
                        .IsFixedLength(true);

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("Car_number")
                        .IsFixedLength(true);

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("Driver_id");

                    b.Property<int>("Madeyear")
                        .HasColumnType("int")
                        .HasColumnName("madeyear");

                    b.Property<string>("Manufacture")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("manufacture");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TarvelDistance")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("tarvel_distance")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Car_");
                });

            modelBuilder.Entity("Takke.Models.Cardrift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AnnData")
                        .HasColumnType("date")
                        .HasColumnName("annData");

                    b.Property<string>("Arriveaddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("arriveaddress");

                    b.Property<string>("Arrivelocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("arrivelocation");

                    b.Property<string>("Cartype")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cartype");

                    b.Property<int?>("Clientid")
                        .HasColumnType("int")
                        .HasColumnName("clientid");

                    b.Property<int?>("Cost")
                        .HasColumnType("int")
                        .HasColumnName("cost");

                    b.Property<string>("Departaddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("departaddress");

                    b.Property<DateTime?>("Departdate")
                        .HasColumnType("date")
                        .HasColumnName("departdate");

                    b.Property<string>("Departlocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("departlocation");

                    b.Property<TimeSpan?>("Departtime")
                        .HasColumnType("time")
                        .HasColumnName("departtime");

                    b.Property<int?>("Numofclients")
                        .HasColumnType("int")
                        .HasColumnName("numofclients");

                    b.HasKey("Id");

                    b.HasIndex("Clientid");

                    b.ToTable("cardrift");
                });

            modelBuilder.Entity("Takke.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Client_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClientBirthday")
                        .HasColumnType("datetime")
                        .HasColumnName("Client_Birthday");

                    b.Property<bool>("ClientGender")
                        .HasColumnType("bit")
                        .HasColumnName("Client_gender");

                    b.Property<string>("ClientMobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("Client_Mobile")
                        .IsFixedLength(true);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("Client_name")
                        .IsFixedLength(true);

                    b.Property<string>("ClientNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("Client_number")
                        .IsFixedLength(true);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Mainphoto")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("mainphoto");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("notes")
                        .IsFixedLength(true);

                    b.Property<DateTime>("RegisterationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("registeration_date");

                    b.Property<string>("Token")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("token");

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Takke.Models.ClientPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_id");

                    b.Property<int?>("Isfromorder")
                        .HasColumnType("int")
                        .HasColumnName("isfromorder");

                    b.Property<int>("Paid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Paymentdate")
                        .HasColumnType("datetime")
                        .HasColumnName("paymentdate");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Client_payment");
                });

            modelBuilder.Entity("Takke.Models.Cobon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ActivationCode")
                        .HasColumnType("datetime")
                        .HasColumnName("Activation_code");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_id");

                    b.Property<int>("CobonValue")
                        .HasColumnType("int")
                        .HasColumnName("Cobon_value");

                    b.Property<int?>("Cobontype")
                        .HasColumnType("int")
                        .HasColumnName("cobontype");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Creation_date");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Cobon");
                });

            modelBuilder.Entity("Takke.Models.Detaile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Clientid")
                        .HasColumnType("int")
                        .HasColumnName("clientid");

                    b.Property<string>("Detailname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("detailname");

                    b.Property<string>("Detailvalue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("detailvalue");

                    b.HasKey("Id");

                    b.HasIndex("Clientid");

                    b.ToTable("Detailes");
                });

            modelBuilder.Entity("Takke.Models.Driftpassenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Clientid")
                        .HasColumnType("int")
                        .HasColumnName("clientid");

                    b.Property<int?>("Driftid")
                        .HasColumnType("int")
                        .HasColumnName("driftid");

                    b.Property<bool?>("Isapproved")
                        .HasColumnType("bit")
                        .HasColumnName("isapproved");

                    b.Property<bool?>("Ispayed")
                        .HasColumnType("bit")
                        .HasColumnName("ispayed");

                    b.Property<DateTime?>("Requestdate")
                        .HasColumnType("date")
                        .HasColumnName("requestdate");

                    b.Property<TimeSpan?>("Requesttime")
                        .HasColumnType("time")
                        .HasColumnName("requesttime");

                    b.HasKey("Id");

                    b.HasIndex("Driftid");

                    b.ToTable("driftpassenger");
                });

            modelBuilder.Entity("Takke.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Driver_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("certificate");

                    b.Property<DateTime>("DriverBirthday")
                        .HasColumnType("date")
                        .HasColumnName("Driver_birthday");

                    b.Property<string>("DriverGender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Driver_gender");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Driver_name");

                    b.Property<int?>("Isdeleted")
                        .HasColumnType("int")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("mobile");

                    b.Property<DateTime>("Registerationdate")
                        .HasColumnType("date")
                        .HasColumnName("registerationdate");

                    b.HasKey("DriverId");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("Takke.Models.DriverPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("Driver_id");

                    b.Property<int?>("Orderid")
                        .HasColumnType("int")
                        .HasColumnName("orderid");

                    b.Property<int>("Paid")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Payment_date");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Driver_payment");
                });

            modelBuilder.Entity("Takke.Models.DriverSalary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("Driver_id");

                    b.Property<int>("ReceiptNumber")
                        .HasColumnType("int")
                        .HasColumnName("receipt_number");

                    b.Property<int>("Salary")
                        .HasColumnType("int")
                        .HasColumnName("salary");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Driver_salary");
                });

            modelBuilder.Entity("Takke.Models.FavouriteAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("Address_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Typeid")
                        .HasColumnType("int")
                        .HasColumnName("typeid");

                    b.HasKey("AddressId")
                        .HasName("PK_Favorit_address");

                    b.HasIndex("ClientId");

                    b.ToTable("Favourite_address");
                });

            modelBuilder.Entity("Takke.Models.FavouriteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Typename")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("typename");

                    b.HasKey("Id");

                    b.HasIndex("Typename");

                    b.ToTable("Favourite_type");
                });

            modelBuilder.Entity("Takke.Models.Massage", b =>
                {
                    b.Property<int>("MassageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Massage_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_id");

                    b.Property<bool?>("Isread")
                        .HasColumnType("bit")
                        .HasColumnName("isread");

                    b.Property<int>("MassageType")
                        .HasColumnType("int")
                        .HasColumnName("Massage_type");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Message_content");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Phone_Number");

                    b.Property<DateTime>("ReadDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Read_date");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("MassageId");

                    b.HasIndex("ClientId");

                    b.ToTable("Massage");
                });

            modelBuilder.Entity("Takke.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("Is_read");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("Notification_id");

                    b.Property<string>("NotificationText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Notification_text");

                    b.Property<DateTime?>("Notificationdate")
                        .HasColumnType("date")
                        .HasColumnName("notificationdate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Notification_");
                });

            modelBuilder.Entity("Takke.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Order_id");

                    b.Property<int>("ApproximateCost")
                        .HasColumnType("int")
                        .HasColumnName("Approximate_cost");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Client_id");

                    b.Property<int>("Cost")
                        .HasColumnType("int")
                        .HasColumnName("cost");

                    b.Property<string>("DestenationDetails")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Destenation_details");

                    b.Property<string>("DestenationLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("destenation_location")
                        .IsFixedLength(true);

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("Driver_id");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Order_date");

                    b.Property<int>("OrderType")
                        .HasColumnType("int")
                        .HasColumnName("order_type");

                    b.Property<int>("Paid")
                        .HasColumnType("int");

                    b.Property<string>("SourceDetails")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Source_details");

                    b.Property<string>("SourceLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("source_location")
                        .IsFixedLength(true);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DriverId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Takke.Models.OrderType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Typename")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("typename");

                    b.HasKey("Id");

                    b.ToTable("Order_Type");
                });

            modelBuilder.Entity("Takke.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("HourPrice")
                        .HasColumnType("float")
                        .HasColumnName("Hour_price");

                    b.Property<double>("KmPrice")
                        .HasColumnType("float")
                        .HasColumnName("KM_price");

                    b.Property<double>("LowestPrice")
                        .HasColumnType("float")
                        .HasColumnName("Lowest_Price");

                    b.Property<double>("_10000Cobon")
                        .HasColumnType("float")
                        .HasColumnName("10000_Cobon");

                    b.Property<double>("_25000Cobon")
                        .HasColumnType("float")
                        .HasColumnName("25000_Cobon");

                    b.Property<double>("_5000Cobon")
                        .HasColumnType("float")
                        .HasColumnName("5000_Cobon");

                    b.HasKey("Id");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("Takke.Models.Setting", b =>
                {
                    b.Property<string>("Entryname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("entryname");

                    b.Property<string>("Entrytype")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("entrytype");

                    b.Property<string>("Entryvalue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("entryvalue");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.ToTable("settings");
                });

            modelBuilder.Entity("Takke.Models.ActivationCode", b =>
                {
                    b.HasOne("Takke.Models.Client", "Client")
                        .WithMany("ActivationCodes")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Activation_code_Client")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Takke.Models.Car", b =>
                {
                    b.HasOne("Takke.Models.Driver", "Driver")
                        .WithMany("Cars")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK_Car__Driver")
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Takke.Models.Cardrift", b =>
                {
                    b.HasOne("Takke.Models.Client", "Client")
                        .WithMany("Cardrifts")
                        .HasForeignKey("Clientid")
                        .HasConstraintName("FK_cardrift_Client");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Takke.Models.ClientPayment", b =>
                {
                    b.HasOne("Takke.Models.Client", "Client")
                        .WithMany("ClientPayments")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Client_payment_Client")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Takke.Models.Cobon", b =>
                {
                    b.HasOne("Takke.Models.Client", "Client")
                        .WithMany("Cobons")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Cobon_Client")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Takke.Models.Detaile", b =>
                {
                    b.HasOne("Takke.Models.Client", "Client")
                        .WithMany("Detailes")
                        .HasForeignKey("Clientid")
                        .HasConstraintName("FK_Detailes_Client")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Takke.Models.Driftpassenger", b =>
                {
                    b.HasOne("Takke.Models.Cardrift", "Drift")
                        .WithMany("Driftpassengers")
                        .HasForeignKey("Driftid")
                        .HasConstraintName("FK_driftpassenger_cardrift");

                    b.Navigation("Drift");
                });

            modelBuilder.Entity("Takke.Models.DriverPayment", b =>
                {
                    b.HasOne("Takke.Models.Driver", "Driver")
                        .WithMany("DriverPayments")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK_Driver_payment_Driver")
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Takke.Models.DriverSalary", b =>
                {
                    b.HasOne("Takke.Models.Driver", "Driver")
                        .WithMany("DriverSalaries")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK_Driver_salary_Driver")
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Takke.Models.FavouriteAddress", b =>
                {
                    b.HasOne("Takke.Models.Client", "Client")
                        .WithMany("FavouriteAddresses")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Favourite_address_Client")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Takke.Models.FavouriteType", b =>
                {
                    b.HasOne("Takke.Models.OrderType", "TypenameNavigation")
                        .WithMany("FavouriteTypes")
                        .HasForeignKey("Typename")
                        .HasConstraintName("FK_Favorit_type_Order_Type")
                        .IsRequired();

                    b.Navigation("TypenameNavigation");
                });

            modelBuilder.Entity("Takke.Models.Massage", b =>
                {
                    b.HasOne("Takke.Models.Client", "Client")
                        .WithMany("Massages")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Massage_Client")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Takke.Models.Notification", b =>
                {
                    b.HasOne("Takke.Models.Client", "Client")
                        .WithMany("Notifications")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Notification__Client")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Takke.Models.Order", b =>
                {
                    b.HasOne("Takke.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Order_Client")
                        .IsRequired();

                    b.HasOne("Takke.Models.Driver", "Driver")
                        .WithMany("Orders")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK_Order_Driver")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Takke.Models.OrderType", b =>
                {
                    b.HasOne("Takke.Models.Order", "IdNavigation")
                        .WithOne("OrderTypeNavigation")
                        .HasForeignKey("Takke.Models.OrderType", "Id")
                        .HasConstraintName("FK_Order_Type_Order")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Takke.Models.Cardrift", b =>
                {
                    b.Navigation("Driftpassengers");
                });

            modelBuilder.Entity("Takke.Models.Client", b =>
                {
                    b.Navigation("ActivationCodes");

                    b.Navigation("Cardrifts");

                    b.Navigation("ClientPayments");

                    b.Navigation("Cobons");

                    b.Navigation("Detailes");

                    b.Navigation("FavouriteAddresses");

                    b.Navigation("Massages");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Takke.Models.Driver", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("DriverPayments");

                    b.Navigation("DriverSalaries");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Takke.Models.Order", b =>
                {
                    b.Navigation("OrderTypeNavigation");
                });

            modelBuilder.Entity("Takke.Models.OrderType", b =>
                {
                    b.Navigation("FavouriteTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
